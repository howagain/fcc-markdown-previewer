{"version":3,"sources":["startingText.md","Components/Clouds.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Clouds","id","class","viewBox","href","version","xmlns","xlink","x","y","width","height","enable-","space","d","App","text","useState","editorText","setEditorText","useEffect","marked","setOptions","breaks","smartLists","fetch","defaultTextPath","then","res","className","value","onChange","e","target","dangerouslySetInnerHTML","__html","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"mHAAAA,EAAOC,QAAU,IAA0B,yC,2NCkD5BC,G,MA/CA,WACb,OACE,6BACE,yBAAKC,GAAG,UACN,yBAAKC,MAAM,qBACX,yBAAKA,MAAM,qBACX,yBAAKA,MAAM,qBACX,yBAAKA,MAAM,qBACX,yBAAKA,MAAM,qBACX,yBAAKA,MAAM,qBACX,yBAAKA,MAAM,qBACX,yBAAKA,MAAM,qBACX,yBAAKA,MAAM,qBACX,yBAAKA,MAAM,qBACX,yBAAKC,QAAQ,YAAYD,MAAM,SAC7B,yBAAKE,KAAK,aAId,yBACEC,QAAQ,MACRJ,GAAG,UACHK,MAAM,6BACNC,MAAM,+BACNC,EAAE,MACFC,EAAE,MACFC,MAAM,OACNC,OAAO,OACPR,QAAQ,YACRS,WAAA,EACAC,MAAM,YAEN,8BACE,0BACEZ,GAAG,QACHa,EAAE,mdCICC,MApCf,WAAgB,IAYYC,EAZb,EACuBC,mBAAS,IADhC,mBACNC,EADM,KACMC,EADN,KAgBb,OAbAC,qBAAU,WACRC,IAAOC,WAAW,CAAEC,QAAQ,EAAMC,YAAY,IAC9CC,MAAMC,KAAiBC,MAAK,SAAAC,GAAG,OAAIA,EAAIZ,UAAQW,MAAK,SAAAX,GAAI,OAAIG,EAAcH,QACzE,IAWD,yBAAKa,UAAU,OACb,yBAAKA,UAAU,cACb,kBAAC,EAAD,CAAQA,UAAU,YAEpB,kDACA,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,oBACb,sCACA,8BAAU5B,GAAG,SAAS6B,MAAOZ,EAAYa,SAjB9B,SAACC,GAClBb,EAAca,EAAEC,OAAOH,WAkBnB,yBAAKD,UAAU,qBACb,uCACA,6BAAS5B,GAAG,UAAUiC,yBAjBJlB,EAiB8CE,EAhB/D,CAAEiB,OAAQd,IAAOL,WCPRoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.83696394.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/startingText.6bc29337.md\";","import React from \"react\";\r\nimport \"./Clouds.scss\"\r\n\r\nconst Clouds = () => {\r\n  return (\r\n    <div>\r\n      <div id=\"Clouds\">\r\n        <div class=\"Cloud Foreground\"></div>\r\n        <div class=\"Cloud Background\"></div>\r\n        <div class=\"Cloud Foreground\"></div>\r\n        <div class=\"Cloud Background\"></div>\r\n        <div class=\"Cloud Foreground\"></div>\r\n        <div class=\"Cloud Background\"></div>\r\n        <div class=\"Cloud Background\"></div>\r\n        <div class=\"Cloud Foreground\"></div>\r\n        <div class=\"Cloud Background\"></div>\r\n        <div class=\"Cloud Background\"></div>\r\n        <svg viewBox=\"0 0 40 24\" class=\"Cloud\">\r\n          <use href=\"#Cloud\"></use>\r\n        </svg>\r\n      </div>\r\n\r\n      <svg\r\n        version=\"1.1\"\r\n        id=\"Layer_1\"\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        xlink=\"http://www.w3.org/1999/xlink\"\r\n        x=\"0px\"\r\n        y=\"0px\"\r\n        width=\"40px\"\r\n        height=\"24px\"\r\n        viewBox=\"0 0 40 24\"\r\n        enable-\r\n        space=\"preserve\"\r\n      >\r\n        <defs>\r\n          <path\r\n            id=\"Cloud\"\r\n            d=\"M33.85,14.388c-0.176,0-0.343,0.034-0.513,0.054c0.184-0.587,0.279-1.208,0.279-1.853c0-3.463-2.809-6.271-6.272-6.271\r\n\tc-0.38,0-0.752,0.039-1.113,0.104C24.874,2.677,21.293,0,17.083,0c-5.379,0-9.739,4.361-9.739,9.738\r\n\tc0,0.418,0.035,0.826,0.084,1.229c-0.375-0.069-0.761-0.11-1.155-0.11C2.811,10.856,0,13.665,0,17.126\r\n\tc0,3.467,2.811,6.275,6.272,6.275c0.214,0,27.156,0.109,27.577,0.109c2.519,0,4.56-2.043,4.56-4.562\r\n\tC38.409,16.43,36.368,14.388,33.85,14.388z\"\r\n          />\r\n        </defs>\r\n      </svg>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Clouds;\r\n","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport marked from \"marked\"\nimport defaultTextPath from \"./startingText.md\"\nimport Clouds from \"./Components/Clouds\"\n\nfunction App() {\n  const [editorText, setEditorText] = useState('')\n\n  useEffect(() => {\n    marked.setOptions({ breaks: true, smartLists: true })\n    fetch(defaultTextPath).then(res => res.text()).then(text => setEditorText(text))\n  }, [])\n\n  const handleText = (e) => {\n    setEditorText(e.target.value)\n  }\n\n  const reactMarkupParse = (text) => {\n    return { __html: marked(text) }\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"background\">\n        <Clouds className=\"clouds\" />\n      </div>\n      <h1>MarkDown Previewer</h1>\n      <div className=\"markdown-app\">\n        <div className=\"editor-container\">\n          <h2>Editor</h2>\n          <textarea id=\"editor\" value={editorText} onChange={handleText}></textarea>\n        </div>\n        <div className=\"preview-container\">\n          <h2>Preview</h2>\n          <article id=\"preview\" dangerouslySetInnerHTML={reactMarkupParse(editorText)}></article>\n        </div>\n      </div>\n    </div >\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}